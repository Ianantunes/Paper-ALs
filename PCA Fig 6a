#FROM: 
#http://www.sthda.com/english/articles/31-principal-component-methods-in-r-practical-guide/118-principal-component-analysis-in-r-prcomp-vs-princomp/

install.packages("factoextra")
install.packages("ggExtra")  #from https://www.rdocumentation.org/packages/ggExtra/versions/0.9/topics/ggMarginal

library(factoextra)
library("factoextra")
library(ggExtra)
library(ggplot2)
library(scales)

database <- as.data.frame(read.csv(file.choose())) #choose the paper archieve

data <- database %>% #retirar NAs
  group_by(Diagnostic, Sex) %>%
  mutate(across(colnames(.)[5:45], ~ ifelse(is.na(.), mean(., na.rm = TRUE), .))) %>%
  ungroup()

matrix <- data %>% 
  select(-Sex, -Age, -Diagnostic, -Sample) %>% 
  select(CD117, CD34, CD65, CD13, CD33, CD38, CD14, CD64, CD10, cCD79a, 
         CD71, CD16, CD5, HLADR, CD19, CD4, sCD3, CD2, CD7, CD8, CD20, CD45) 
matrix <- as.data.frame(matrix)

str(matrix)

data$Diagnostic <- factor(data$Diagnostic, levels = c("Control", "AML", "B-ALL", "T-ALL"))

Group <- factor(data$Diagnostic, 
                levels = c("Control", "AML", "B-ALL", "T-ALL"))

res.pca <- prcomp(matrix, scale = TRUE)


#Biplot sem os vetores
p <- fviz_pca_ind(res.pca,
                  col.ind = Group, # color by groups
                  geom = c("point"),
                  palette = c("#616F39", "#6A011F", "#93AECC", "#08376A"),
                  addEllipses = TRUE, # Concentration ellipses
                  ellipse.type = "confidence",
                  legend.title = "Diagnostic",
                  repel = TRUE
) + theme(legend.position = "bottom") + ggtitle("PCA") + 
  theme(text = element_text(size = 16), axis.text = element_text(size = 16)) 
print(p)
#Adding histogram
p1 <- ggExtra::ggMarginal(p, type = "density", groupFill = TRUE, groupColour = TRUE)
print(p1)


# Scree plot ######################################
fviz_eig(res.pca)+
  theme(text = element_text(size = 16), axis.text = element_text(size = 16))


# Variables plot
fviz_pca_var(res.pca,
             col.var = "contrib", # Color by contributions to the PC
             gradient.cols = c("darkgrey", "darkgreen", "blue"),
             alpha.var = 0.1,
             repel = TRUE     # Avoid text overlapping
)+
  theme(text = element_text(size = 16), axis.text = element_text(size = 16))

#Additional: https://www.r-bloggers.com/2013/06/using-r-two-plots-of-principal-component-analysis/

# Data table save
nome_pasta <- "CorreloTablesALpaper"
if (!file.exists(file.path(getwd(), nome_pasta))) {
  dir.create(file.path(getwd(), nome_pasta))
  cat("Pasta", nome_pasta, "criada.\n")
} else {
  cat("A pasta", nome_pasta, "já existe.\n")
}
setwd(file.path(getwd(), nome_pasta))
getwd() # Confirmar

# Eigenvalues
eig.val <- get_eigenvalue(res.pca)   ###TER EM MENTE
eig.val
write.table(eig.val, sep = ",", file = "./eig.val.csv", quote = FALSE, col.names = FALSE)


# Results for Variables
res.var <- get_pca_var(res.pca)
res.var$coord          # Coordinates
res.var$contrib        # Contributions to the PCs    ### Useu apenas esse, mas o eig.val, para minhas tabelas suplementares
res.var$cos2           # Quality of representation 
# Results for individuals
res.ind <- get_pca_ind(res.pca)
res.ind$coord          # Coordinates
res.ind$contrib        # Contributions to the PCs
res.ind$cos2           # Quality of representation 

pcacontribs <- res.var$contrib
write.table(pcacontribs, sep = ",", file = "./pcacontribs.csv", quote = FALSE, col.names = FALSE)

























### Barrplot pra ver as variáveis em grupos (No meu caso esse grupo não deu certo, então so plotei sem ele) 
melted <- cbind(Group, melt(res.pca$rotation[,1:9]))
barplot <- ggplot(data=melt(res.pca$rotation[,1:9])) +
  geom_bar(aes(x=Var1, y=value, fill=variable.group), stat="identity") +
  facet_wrap(~Var2)

### Dot plot para as dimensões

Diagnostic <- Group # So pra controlar o nome da legenda das cores

scores <- data.frame(Group, res.pca$x[,1:3])
pc1.2 <- qplot(x=PC1, y=PC2, data=scores, colour=Diagnostic) +
  scale_color_manual(values = c("#616F39", "#6A011F", "#93AECC", "#08376A")) +
  theme(legend.position="none")+
  theme_bw()+theme_classic()+
  theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank())
pc1.3 <- qplot(x=PC1, y=PC3, data=scores, colour=Diagnostic) +
  scale_color_manual(values = c("#616F39", "#6A011F", "#93AECC", "#08376A")) +
  theme(legend.position="none")+
  theme_bw()+theme_classic()+
  theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank())
pc2.3 <- qplot(x=PC2, y=PC3, data=scores, colour=Diagnostic) +
  scale_color_manual(values = c("#616F39", "#6A011F", "#93AECC", "#08376A")) +
  theme(legend.position="none")+
  theme_bw()+theme_classic()+
  theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank())

multiplot(pc1.2, pc1.3, pc2.3, cols=3)


### Multiplot function origin: http://www.cookbook-r.com/Graphs/Multiple_graphs_on_one_page_(ggplot2)/

# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
  library(grid)
  
  # Make a list from the ... arguments and plotlist
  plots <- c(list(...), plotlist)
  
  numPlots = length(plots)
  
  # If layout is NULL, then use 'cols' to determine layout
  if (is.null(layout)) {
    # Make the panel
    # ncol: Number of columns of plots
    # nrow: Number of rows needed, calculated from # of cols
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
                     ncol = cols, nrow = ceiling(numPlots/cols))
  }
  
  if (numPlots==1) {
    print(plots[[1]])
    
  } else {
    # Set up the page
    grid.newpage()
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
    
    # Make each plot, in the correct location
    for (i in 1:numPlots) {
      # Get the i,j matrix positions of the regions that contain this subplot
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
      
      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
                                      layout.pos.col = matchidx$col))
    }
  }
}
